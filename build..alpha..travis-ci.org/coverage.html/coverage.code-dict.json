{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/lib.npmtest_cordova_plugin_wechat.js":"/* istanbul instrument in package npmtest_cordova_plugin_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_wechat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_wechat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-wechat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_wechat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_wechat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_wechat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_wechat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_wechat.__dirname + '/lib.npmtest_cordova_plugin_wechat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/node_modules/cordova-plugin-wechat/scripts/android-install.js":"#!/usr/bin/env node\n\nmodule.exports = function (context) {\n    var path        = context.requireCordovaModule('path'),\n        fs          = context.requireCordovaModule('fs'),\n        shell       = context.requireCordovaModule('shelljs'),\n        projectRoot = context.opts.projectRoot,\n        plugins     = context.opts.plugins || [];\n\n    // The plugins array will be empty during platform add\n    if (plugins.length > 0 && plugins.indexOf('cordova-plugin-wechat') === -1) {\n        return ;\n    }\n\n    var ConfigParser = null;\n    try {\n        ConfigParser = context.requireCordovaModule('cordova-common').ConfigParser;\n    } catch(e) {\n        // fallback\n        ConfigParser = context.requireCordovaModule('cordova-lib/src/configparser/ConfigParser');\n    }\n\n    var config      = new ConfigParser(path.join(context.opts.projectRoot, \"config.xml\")),\n        packageName = config.android_packageName() || config.packageName();\n\n    // replace dash (-) with underscore (_)\n    packageName = packageName.replace(/-/g , \"_\");\n    \n    console.info(\"Running android-install.Hook: \" + context.hook + \", Package: \" + packageName + \", Path: \" + projectRoot + \".\");\n\n    if (!packageName) {\n        console.error(\"Package name could not be found!\");\n        return ;\n    }\n\n    // android platform available?\n    if (context.opts.cordova.platforms.indexOf(\"android\") === -1) {\n        console.info(\"Android platform has not been added.\");\n        return ;\n    }\n\n    var targetDir  = path.join(projectRoot, \"platforms\", \"android\", \"src\", packageName.replace(/\\./g, path.sep), \"wxapi\");\n        targetFiles = [\"EntryActivity.java\", \"WXEntryActivity.java\", \"WXPayEntryActivity.java\"];\n\n    if (['after_plugin_add', 'after_plugin_install'].indexOf(context.hook) === -1) {\n        // remove it?\n        targetFiles.forEach(function (f) {\n            try {\n                fs.unlinkSync(path.join(targetDir, f));\n            } catch (err) {}\n        });\n    } else {\n        // create directory\n        shell.mkdir('-p', targetDir);\n\n        // sync the content\n        targetFiles.forEach(function (f) {\n            fs.readFile(path.join(context.opts.plugin.dir, 'src', 'android', f), {encoding: 'utf-8'}, function (err, data) {\n                if (err) {\n                    throw err;\n                }\n\n                data = data.replace(/^package __PACKAGE_NAME__;/m, 'package ' + packageName + '.wxapi;');\n                fs.writeFileSync(path.join(targetDir, f), data);\n            });\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/node_modules/cordova-plugin-wechat/www/wechat.js":"var exec = require('cordova/exec');\n\nmodule.exports = {\n    Scene: {\n        SESSION:  0, // 聊天界面\n        TIMELINE: 1, // 朋友圈\n        FAVORITE: 2  // 收藏\n    },\n\n    Type: {\n        APP:     1,\n        EMOTION: 2,\n        FILE:    3,\n        IMAGE:   4,\n        MUSIC:   5,\n        VIDEO:   6,\n        WEBPAGE: 7\n    },\n\n    isInstalled: function (onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"isWXAppInstalled\", []);\n    },\n\n    /**\n     * Share a message to wechat app\n     *\n     * @example\n     * <code>\n     * Wechat.share({\n     *     message: {\n     *        title: \"Message Title\",\n     *        description: \"Message Description(optional)\",\n     *        mediaTagName: \"Media Tag Name(optional)\",\n     *        thumb: \"http://YOUR_THUMBNAIL_IMAGE\",\n     *        media: {\n     *            type: Wechat.Type.WEBPAGE,   // webpage\n     *            webpageUrl: \"https://github.com/xu-li/cordova-plugin-wechat\"    // webpage\n     *        }\n     *    },\n     *    scene: Wechat.Scene.TIMELINE   // share to Timeline\n     * }, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n    share: function (message, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"share\", [message]);\n    },\n\n    /**\n     * Sending an auth request to Wechat\n     *\n     * @example\n     * <code>\n     * Wechat.auth(function (response) { alert(response.code); });\n     * </code>\n     */\n    auth: function (scope, state, onSuccess, onError) {\n        if (typeof scope == \"function\") {\n            // Wechat.auth(function () { alert(\"Success\"); });\n            // Wechat.auth(function () { alert(\"Success\"); }, function (error) { alert(error); });\n            return exec(scope, state, \"Wechat\", \"sendAuthRequest\");\n        }\n\n        if (typeof state == \"function\") {\n            // Wechat.auth(\"snsapi_userinfo\", function () { alert(\"Success\"); });\n            // Wechat.auth(\"snsapi_userinfo\", function () { alert(\"Success\"); }, function (error) { alert(error); });\n            return exec(state, onSuccess, \"Wechat\", \"sendAuthRequest\", [scope]);\n        }\n\n        return exec(onSuccess, onError, \"Wechat\", \"sendAuthRequest\", [scope, state]);\n    },\n\n    /**\n     * Send a payment request\n     *\n     * @link https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1\n     * @example\n     * <code>\n     * var params = {\n     *     mch_id: '10000100', // merchant id\n     *     prepay_id: 'wx201411101639507cbf6ffd8b0779950874', // prepay id returned from server\n     *     nonce: '1add1a30ac87aa2db72f57a2375d8fec', // nonce string returned from server\n     *     timestamp: '1439531364', // timestamp\n     *     sign: '0CB01533B8C1EF103065174F50BCA001', // signed string\n     * };\n     * Wechat.sendPaymentRequest(params, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n    sendPaymentRequest: function (params, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"sendPaymentRequest\", [params]);\n    },\n\n    /**\n     * jumpToBizProfile （跳转到某个微信公众号）2016-11-11 测试是失效的，囧\n     *\n     * @link https://segmentfault.com/a/1190000007204624\n     * @link https://segmentfault.com/q/1010000003907796\n     * @example\n     * <code>\n     * var params = {\n     *     info: 'gh_xxxxxxx', // 公众帐号原始ID\n     *     type:  'Normal' // 普通号\n     * }\n     * or \n     * var params = {\n     *     info: 'extMsg', // 相关的硬件二维码串\n     *     type:  'Device' // 硬件号\n     * };\n     * Wechat.jumpToBizProfile(params, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n\n    jumpToBizProfile: function (params, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"jumpToBizProfile\", [params]);\n    },\n\n    /**\n     * jumpToWechat （因为jumpToBizProfile失效了，暂时新增了一个临时的api)\n     *\n     * @link https://segmentfault.com/a/1190000007204624\n     * @example\n     * <code>\n     * var url = \"wechat://\" 现阶段貌似只支持这一个协议了\n     * Wechat.jumpToWechat(url, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n    jumpToWechat: function (url, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"jumpToWechat\", [url]);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-wechat/node_modules/cordova-plugin-wechat/temp/www/wechat.js":"var exec = require('cordova/exec');\n\nmodule.exports = {\n    Scene: {\n        SESSION:  0, // 聊天界面\n        TIMELINE: 1, // 朋友圈\n        FAVORITE: 2  // 收藏\n    },\n\n    Type: {\n        APP:     1,\n        EMOTION: 2,\n        FILE:    3,\n        IMAGE:   4,\n        MUSIC:   5,\n        VIDEO:   6,\n        WEBPAGE: 7\n    },\n\n    isInstalled: function (onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"isWXAppInstalled\", []);\n    },\n\n    /**\n     * Share a message to wechat app\n     *\n     * @example\n     * <code>\n     * Wechat.share({\n     *     message: {\n     *        title: \"Message Title\",\n     *        description: \"Message Description(optional)\",\n     *        mediaTagName: \"Media Tag Name(optional)\",\n     *        thumb: \"http://YOUR_THUMBNAIL_IMAGE\",\n     *        media: {\n     *            type: Wechat.Type.WEBPAGE,   // webpage\n     *            webpageUrl: \"https://github.com/xu-li/cordova-plugin-wechat\"    // webpage\n     *        }\n     *    },\n     *    scene: Wechat.Scene.TIMELINE   // share to Timeline\n     * }, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n    share: function (message, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"share\", [message]);\n    },\n\n    /**\n     * Sending an auth request to Wechat\n     *\n     * @example\n     * <code>\n     * Wechat.auth(function (response) { alert(response.code); });\n     * </code>\n     */\n    auth: function (scope, state, onSuccess, onError) {\n        if (typeof scope == \"function\") {\n            // Wechat.auth(function () { alert(\"Success\"); });\n            // Wechat.auth(function () { alert(\"Success\"); }, function (error) { alert(error); });\n            return exec(scope, state, \"Wechat\", \"sendAuthRequest\");\n        }\n\n        if (typeof state == \"function\") {\n            // Wechat.auth(\"snsapi_userinfo\", function () { alert(\"Success\"); });\n            // Wechat.auth(\"snsapi_userinfo\", function () { alert(\"Success\"); }, function (error) { alert(error); });\n            return exec(state, onSuccess, \"Wechat\", \"sendAuthRequest\", [scope]);\n        }\n\n        return exec(onSuccess, onError, \"Wechat\", \"sendAuthRequest\", [scope, state]);\n    },\n\n    /**\n     * Send a payment request\n     *\n     * @link https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1\n     * @example\n     * <code>\n     * var params = {\n     *     mch_id: '10000100', // merchant id\n     *     prepay_id: 'wx201411101639507cbf6ffd8b0779950874', // prepay id returned from server\n     *     nonce: '1add1a30ac87aa2db72f57a2375d8fec', // nonce string returned from server\n     *     timestamp: '1439531364', // timestamp\n     *     sign: '0CB01533B8C1EF103065174F50BCA001', // signed string\n     * };\n     * Wechat.sendPaymentRequest(params, function () {\n     *     alert(\"Success\");\n     * }, function (reason) {\n     *     alert(\"Failed: \" + reason);\n     * });\n     * </code>\n     */\n    sendPaymentRequest: function (params, onSuccess, onError) {\n        exec(onSuccess, onError, \"Wechat\", \"sendPaymentRequest\", [params]);\n    }\n};\n"}